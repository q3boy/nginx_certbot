#!/bin/bash

# Docker操作辅助脚本
# 默认镜像名
IMAGE_NAME="nginx_certbot"
# 默认容器名
CONTAINER_NAME="ngce"

# 显示帮助信息
show_help() {
    echo "Docker操作辅助脚本"
    echo "用法: $0 [命令] [参数]"
    echo ""
    echo "命令:"
    echo "  build [版本号]                构建镜像并设置版本号标签 (默认: 1.0.0)"
    echo "  tag [源标签] [目标标签]        为指定版本号的镜像设置新标签 (默认: 最新版本->latest)"
    echo "  run [标签]                    创建并运行容器 (默认: 最新版本)"
    echo "  clean                        删除所有无标签的镜像"
    echo "  exec [容器名]                 以交互式方式进入容器并执行bash (默认: ngce)"
    echo "  images                       列出所有镜像"
    echo "  ps                           列出所有容器"
    echo "  logs [容器名] [-f]            查看指定容器日志 (默认: ngce)"
    echo ""
    echo "选项:"
    echo "  -i, --image [镜像名]          指定镜像名 (默认: nginx_certbot)"
    echo "  -h, --help                   显示帮助信息"
    exit 0
}

# 解析命令行参数
parse_args() {
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -i|--image)
                IMAGE_NAME="$2"
                shift 2
                ;;
            -h|--help)
                show_help
                ;;
            *)
                break
                ;;
        esac
    done

    # 如果没有命令，显示帮助
    if [[ $# -eq 0 ]]; then
        show_help
    fi

    # 解析命令
    COMMAND="$1"
    shift

    case "$COMMAND" in
        build)
            VERSION="${1:-1.0.0}"
            build_image "$VERSION"
            ;;
        tag)
            SOURCE_TAG="${1:-$(get_latest_version)}"
            TARGET_TAG="${2:-latest}"
            tag_image "$SOURCE_TAG" "$TARGET_TAG"
            ;;
        run)
            TAG="${1:-$(get_latest_version)}"
            run_container "$TAG"
            ;;
        clean)
            clean_images
            ;;
        exec)
            CONTAINER="${1:-$CONTAINER_NAME}"
            exec_container "$CONTAINER"
            ;;
        images)
            list_images
            ;;
        ps)
            list_containers
            ;;
        logs)
            CONTAINER="${1:-$CONTAINER_NAME}"
            FOLLOW=false
            if [[ "$2" == "-f" ]]; then
                FOLLOW=true
            fi
            view_logs "$CONTAINER" "$FOLLOW"
            ;;
        *)
            echo "未知命令: $COMMAND"
            show_help
            ;;
    esac
}

# 获取最新版本
get_latest_version() {
    local latest_version=$(docker images "$IMAGE_NAME" --format "{{.Tag}}" | grep -v "latest" | sort -V | tail -n 1)
    if [[ -z "$latest_version" ]]; then
        echo "1.0.0"
    else
        echo "$latest_version"
    fi
}

# 构建镜像
build_image() {
    local version="$1"
    echo "正在构建镜像 $IMAGE_NAME:$version..."
    docker build -t "$IMAGE_NAME:$version" .
    if [[ $? -eq 0 ]]; then
        echo "镜像 $IMAGE_NAME:$version 构建成功"
    else
        echo "镜像构建失败"
        exit 1
    fi
}

# 为镜像设置标签
tag_image() {
    local source_tag="$1"
    local target_tag="$2"
    echo "为镜像 $IMAGE_NAME:$source_tag 设置标签 $target_tag..."
    docker tag "$IMAGE_NAME:$source_tag" "$IMAGE_NAME:$target_tag"
    if [[ $? -eq 0 ]]; then
        echo "标签设置成功"
    else
        echo "标签设置失败"
        exit 1
    fi
}

# 创建并运行容器
run_container() {
    local tag="$1"
    echo "正在创建并运行容器 $CONTAINER_NAME，使用镜像 $IMAGE_NAME:$tag..."

    # 检查容器是否已存在
    if docker ps -a --format "{{.Names}}" | grep -q "^$CONTAINER_NAME$"; then
        echo "容器 $CONTAINER_NAME 已存在，正在删除..."
        docker rm -f "$CONTAINER_NAME" > /dev/null
    fi

    # 检查环境变量文件
    ENV_OPTS=""
    if [[ -f .env ]]; then
        ENV_OPTS="--env-file .env"
    fi

    # 创建并运行容器
    docker run -it --rm \
        --name "$CONTAINER_NAME" \
        $ENV_OPTS \
        -v nginx-logs:/var/log/nginx \
        -v certbot-conf:/etc/letsencrypt \
        -v certbot-lib:/var/lib/letsencrypt \
        -v certbot-www:/var/www/certbot \
        -p 80:80 \
        -p 443:443 \
        "$IMAGE_NAME:$tag"
}

# 删除无标签镜像
clean_images() {
    echo "正在删除所有无标签的镜像..."
    docker images --filter "dangling=true" -q | xargs -r docker rmi
    echo "清理完成"
}

# 进入容器
exec_container() {
    local container="$1"
    echo "正在进入容器 $container..."
    docker exec -it "$container" bash
}

# 列出所有镜像
list_images() {
    echo "列出所有镜像:"
    docker images -a
}

# 列出所有容器
list_containers() {
    echo "列出所有容器:"
    docker ps -a
}

# 查看容器日志
view_logs() {
    local container="$1"
    local follow="$2"

    if [[ "$follow" == "true" ]]; then
        echo "正在实时查看容器 $container 的日志..."
        docker logs -f "$container"
    else
        echo "查看容器 $container 的日志:"
        docker logs "$container"
    fi
}

# 主函数
main() {
    parse_args "$@"
}

# 执行主函数
main "$@"